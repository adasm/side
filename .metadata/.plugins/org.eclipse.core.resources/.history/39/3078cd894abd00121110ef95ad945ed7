package com.softsquare.side;

import java.util.ArrayList;
import java.util.Iterator;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.Filter;
import com.badlogic.gdx.physics.box2d.Fixture;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.QueryCallback;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.physics.box2d.joints.MouseJoint;
import com.badlogic.gdx.physics.box2d.joints.MouseJointDef;

public class LevelEditor implements Screen, InputProcessor {
	private ArrayList<Shaper> terrainMap;

	private Level level;
	private SideGame game;
	private Camera camera;
	private Vector2 mousePos = null;
	private Vector2 cameraOrigin = new Vector2();
	
	private boolean editorMode = false;

	public LevelEditor(SideGame game, Level level) {
		this.game = game;
		this.level = level;
		InputManager.add(this);
	}

	@Override
	public void show() {
		terrainMap = level.terrain.terrainMap;
		camera = new Camera(game);
	}

	@Override
	public void render(float deltaTime) {
		game.begin();
		Gdx.gl.glClearColor(0, 0, 0, 1);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		if (mousePos != null) {
			camera.moveTo(mousePos);
			camera.update(deltaTime, true);
			drag();
		}
		renderTerrain();
		game.end();
	}

	public void renderTerrain() {
		ShapeRenderer shapeRenderer = new ShapeRenderer();
		shapeRenderer.begin(ShapeType.Line);
		shapeRenderer.setProjectionMatrix(camera.get().combined);
		shapeRenderer.setColor(1, 0, 1, 1);
		for (int i = 0; i < terrainMap.size(); i++) {
			shapeRenderer.line(terrainMap.get(i).getVectorList()[0].x,
					terrainMap.get(i).getVectorList()[0].y, terrainMap.get(i)
							.getVectorList()[1].x, terrainMap.get(i)
							.getVectorList()[1].y);
			shapeRenderer.line(terrainMap.get(i).getVectorList()[1].x,
					terrainMap.get(i).getVectorList()[1].y, terrainMap.get(i)
							.getVectorList()[2].x, terrainMap.get(i)
							.getVectorList()[2].y);
			shapeRenderer.line(terrainMap.get(i).getVectorList()[2].x,
					terrainMap.get(i).getVectorList()[2].y, terrainMap.get(i)
							.getVectorList()[3].x, terrainMap.get(i)
							.getVectorList()[3].y);
			shapeRenderer.line(terrainMap.get(i).getVectorList()[3].x,
					terrainMap.get(i).getVectorList()[3].y, terrainMap.get(i)
							.getVectorList()[0].x, terrainMap.get(i)
							.getVectorList()[0].y);

		}
	}

	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void hide() {
	}

	@Override
	public void pause() {
		editorMode = false;
	}

	@Override
	public void resume() {
		editorMode = true;
	}

	@Override
	public void dispose() {
	}

	Vector3 target = new Vector3(0, 0, 0);
	Vector3 worldPos = new Vector3(0, 0, 0);
	int tX, tY;
	boolean drag = false;

	public void drag() {
		target = new Vector3(tX, tY, 0);
		camera.get().unproject(target);
		cameraOrigin.x += -target.x + worldPos.x;
		cameraOrigin.y += -target.y + worldPos.y;
	}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		return false;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		mousePos.x = tX = screenX;
		mousePos.y = tY = screenY;
		return false;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {

		return false;
	}

	@Override
	public boolean keyDown(int keycode) {
		return false;
	}

	@Override
	public boolean keyUp(int keycode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		if (editorMode) {
			mousePos = new Vector2(screenX, screenY);
		}
		return false;
	}

	@Override
	public boolean scrolled(int amount) {
		Globals.zoom_max.set(Globals.zoom_max.get() - 0.1f * amount);
		return false;
	}

}
